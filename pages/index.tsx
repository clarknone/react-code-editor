import {
  Box,
  CircularProgress,
  IconButton,
  LinearProgress,
  MenuItem,
  Select,
  SelectChangeEvent,
  Stack,
  Typography,
} from "@mui/material";
import Head from "next/head";
import Editor from "@monaco-editor/react";
import React, { useState } from "react";

import { FaPlay } from "react-icons/fa";
import { runCode } from "../service/api";
import { ApiResponse, LanguageOption } from "../interface/api";

const languages: LanguageOption[] = [
  { title: "Python3", value: "python", compileValue: "python3" },
  { title: "Javascript", value: "javascript", compileValue: "nodejs" },
  { title: "C", value: "c" },
  { title: "C++", value: "cpp" },
  { title: "Java", value: "java" },
];
const theme = [
  { title: "Dark", value: "vs-dark" },
  { title: "Light", value: "light" },
];

let selectedLanguage: LanguageOption = languages[0];

export default function Home() {
  const [config, setConfig] = useState({ language: selectedLanguage.value });
  const [loading, setLoading] = useState(false);
  const [code, setCode] = useState("");
  const [userInput, setUserInput] = useState("");
  const [apiResponse, setApiResponse] = useState<ApiResponse>({
    statusCode: 2,
  });

  const handleChange = (e: SelectChangeEvent) => {
    const { name, value } = e.target;
    name && value && setConfig((val) => ({ ...val, [name]: value }));
  };

  const handleLanguage = (e: SelectChangeEvent) => {
    const { name, value } = e.target;
    if (name) {
      const obj = languages[Number(value)];
      setConfig((val) => ({ ...val, [name]: obj.value }));
      selectedLanguage = obj;
    }
  };

  const submit = () => {
    setLoading(true);
    const language = selectedLanguage.compileValue || selectedLanguage.value;
    runCode({
      script: code,
      language: language,
      stdin: userInput,
    })
      .then((resp) => {
        setApiResponse({ ...resp });
      })
      .catch((e) => {
        console.log(e);
      })
      .finally(() => {
        setLoading(false);
      });
  };

  return (
    <Box p={"1em"}>
      <Head>
        <title>React Editor </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box>
        <Stack
          px={"2vw"}
          py={"1vw"}
          direction={"row"}
          alignItems="center"
          columnGap={"2vw"}
        >
          <Typography> Code Compiler </Typography>
          <Select name="language" defaultValue="0" onChange={handleLanguage}>
            {languages.map((item, index) => (
              <MenuItem key={`${item.value}`} value={index}>
                {item.title}
              </MenuItem>
            ))}
          </Select>
          <Select name="theme" defaultValue="light" onChange={handleChange}>
            {theme.map((item) => (
              <MenuItem key={item.value} value={item.value}>
                {item.title}
              </MenuItem>
            ))}
          </Select>
        </Stack>
        <Stack
          direction={{ xs: "column", sm: "row" }}
          alignItems={ "center" }
          gap={"2vw"}
          // minHeight={"800px"}
          minHeight="90vh"
        >
          <Box width="100%" maxWidth={{sm:"46vw"}}>
            <Editor
              height="90vh"
              defaultValue="#some comment"
              {...config}
              onChange={(value) => setCode(`${value}`)}
            />
          </Box>

          <Box>
            <IconButton disabled={loading} onClick={submit}>
              {loading ? (
                <CircularProgress variant="indeterminate" />
              ) : (
                <FaPlay />
              )}
            </IconButton>
          </Box>

          <Stack height="90vh" rowGap={"1vmax"} width="100%" maxWidth={{sm:"46vw"}}>
            <Box flexGrow={1} p={"1em"} border="0.01em solid black">
              <Typography fontWeight="600" fontSize={"1.2em"}>
                {" "}
                Input{" "}
              </Typography>
            </Box>
            <Box flexGrow={1} p={"1em"} border="0.01em solid black">
              <Stack rowGap={"1vmax"}>
                <Typography fontWeight="600" fontSize={"1.2em"}>
                  Output
                </Typography>
                <Box flexGrow={1}>
                  {loading ? (
                    <LinearProgress variant="indeterminate" />
                  ) : (
                    <Box>
                      <Typography> {apiResponse?.output} </Typography>
                    </Box>
                  )}
                </Box>
              </Stack>
            </Box>
          </Stack>
        </Stack>
      </Box>
    </Box>
  );
}
